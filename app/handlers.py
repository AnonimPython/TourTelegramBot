from aiogram import Dispatcher, types
from aiogram.filters import Command
from app.data import COUNTRIES, CHECKLIST, CURRENCY_RATES

def register_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, Command(commands=['start', 'help']))
    dp.message.register(cmd_countries, Command(commands=['countries']))
    dp.message.register(cmd_currency, Command(commands=['currency']))
    dp.message.register(cmd_phrases, Command(commands=['phrases']))
    dp.message.register(cmd_checklist, Command(commands=['checklist']))
    dp.message.register(cmd_sights, Command(commands=['sights']))

async def cmd_start(message: types.Message):
    text = (
        "üåç –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/countries - –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω\n"
        "/currency [100 USD RUB] - –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç\n"
        "/phrases [–∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã] - –ü–æ–ª–µ–∑–Ω—ã–µ —Ñ—Ä–∞–∑—ã\n"
        "/checklist - –ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è —Å–±–æ—Ä–æ–≤\n"
        "/sights [–∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã] - –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    )
    await message.answer(text)

async def cmd_countries(message: types.Message):
    countries = "\n".join([f"{code} - {data['name']}" for code, data in COUNTRIES.items()])
    await message.answer(f"üõ´ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã:\n{countries}")

async def cmd_currency(message: types.Message):
    try:
        _, amount, from_curr, to_curr = message.text.split()
        from_curr = from_curr.upper()
        to_curr = to_curr.upper()
        
        rate = CURRENCY_RATES.get(from_curr, {}).get(to_curr)
        if not rate:
            return await message.answer("üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            
        result = float(amount) * rate
        await message.answer(f"üí± {amount} {from_curr} ‚Üí {round(result, 2)} {to_curr}")
        
    except Exception:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /currency [—Å—É–º–º–∞] [–∏–∑] [–≤]\n–ü—Ä–∏–º–µ—Ä: /currency 100 USD RUB")

async def cmd_phrases(message: types.Message):
    try:
        country_code = message.text.split()[1].upper()
        country = COUNTRIES[country_code]
        phrases = "\n".join([f"‚Ä¢ {k} ‚Üí {v}" for k, v in country['phrases'].items()])
        await message.answer(f"üìö –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã ({country['name']}):\n{phrases}")
    except:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /phrases [–∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã]\n–ü—Ä–∏–º–µ—Ä: /phrases DE")

async def cmd_checklist(message: types.Message):
    checklist = "\n".join([f"‚úÖ {item}" for item in CHECKLIST])
    await message.answer(f"üß≥ –ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π:\n{checklist}")

async def cmd_sights(message: types.Message):
    try:
        country_code = message.text.split()[1].upper()
        country = COUNTRIES[country_code]
        sights = "\n".join([f"üèõ {sight}" for sight in country['sights']])
        await message.answer(f"üåÜ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {country['name']}:\n{sights}")
    except:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /sights [–∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã]\n–ü—Ä–∏–º–µ—Ä: /sights IT")